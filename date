import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val etIncrementDate: EditText = findViewById(R.id.etIncrementDate)
        val btnIncrementDate: Button = findViewById(R.id.btnIncrementDate)
        val tvIncrementedDateResult: TextView = findViewById(R.id.tvIncrementedDateResult)

        // Add TextWatcher to format date while typing
        etIncrementDate.addTextChangedListener(object : TextWatcher {
            private var current = ""
            private val yyyymmdd = "YYYYMMDD"
            private val dateFormatter = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}

            override fun afterTextChanged(s: Editable?) {
                if (s.toString() != current) {
                    val clean = s.toString().replace("[^\\d]".toRegex(), "") // Remove non-digit characters
                    val cleanCurrent = current.replace("[^\\d]".toRegex(), "")

                    val cleanLength = clean.length
                    var formattedDate = ""

                    if (clean != cleanCurrent) {
                        val dayMonthYear = arrayOf("", "", "")

                        for (i in clean.indices) {
                            when (i) {
                                in 0..3 -> dayMonthYear[0] += clean[i] // Year
                                in 4..5 -> dayMonthYear[1] += clean[i] // Month
                                in 6..7 -> dayMonthYear[2] += clean[i] // Day
                            }
                        }

                        val year = dayMonthYear[0]
                        val month = dayMonthYear[1].padEnd(2, '0') // Ensure 2 digits for month
                        val day = dayMonthYear[2].padEnd(2, '0') // Ensure 2 digits for day

                        formattedDate = when (cleanLength) {
                            in 1..4 -> year
                            in 5..6 -> "$year-$month"
                            in 7..8 -> "$year-$month-$day"
                            else -> "$year-$month-$day"
                        }
                    }

                    current = formattedDate
                    etIncrementDate.removeTextChangedListener(this)
                    etIncrementDate.setText(formattedDate)
                    etIncrementDate.setSelection(formattedDate.length.coerceAtMost(etIncrementDate.text.length)) // Set cursor
                    etIncrementDate.addTextChangedListener(this)
                }
            }
        })

        // Button click listener to increment the date by one month
        btnIncrementDate.setOnClickListener {
            val inputDate = etIncrementDate.text.toString()
            val result = incrementDateByOneMonth(inputDate)
            tvIncrementedDateResult.text = result
        }
    }

    // Function to increment the date by one month
    private fun incrementDateByOneMonth(date: String): String {
        return try {
            val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
            val parsedDate = dateFormat.parse(date)!!

            val calendar = Calendar.getInstance()
            calendar.time = parsedDate
            calendar.add(Calendar.MONTH, 1) // Add one month

            dateFormat.format(calendar.time) // Return the new date in yyyy-MM-dd format
        } catch (e: Exception) {
            "Invalid date format. Please use yyyy-MM-dd"
        }
    }
}




import java.text.SimpleDateFormat
import java.util.*

// Function to calculate the difference between two dates
fun calculateDateDifference(startDate: String, endDate: String): String {
    val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
    val start = dateFormat.parse(startDate)!!
    val end = dateFormat.parse(endDate)!!
    
    val calendarStart = Calendar.getInstance().apply { time = start }
    val calendarEnd = Calendar.getInstance().apply { time = end }
    
    val years = calendarEnd.get(Calendar.YEAR) - calendarStart.get(Calendar.YEAR)
    val months = calendarEnd.get(Calendar.MONTH) - calendarStart.get(Calendar.MONTH)
    val days = calendarEnd.get(Calendar.DAY_OF_MONTH) - calendarStart.get(Calendar.DAY_OF_MONTH)
    
    val adjustedMonths = if (days < 0) months - 1 else months
    val adjustedDays = if (days < 0) days + calendarStart.getActualMaximum(Calendar.DAY_OF_MONTH) else days
    val adjustedYears = if (adjustedMonths < 0) years - 1 else years
    
    return "${adjustedYears} years, ${adjustedMonths.coerceAtLeast(0)} months, ${adjustedDays.coerceAtLeast(0)} days"
}

// Function to convert date from yyyy-mm-dd to dd-mm-yyyy
fun convertDateFormat(date: String): String {
    val inputFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
    val outputFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
    val parsedDate = inputFormat.parse(date)!!
    return outputFormat.format(parsedDate)
}

// Function to convert date to timestamp
fun dateToTimestamp(date: String): Long {
    val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
    return dateFormat.parse(date)!!.time / 1000
}

// Function to convert seconds into days, hours, minutes, and seconds
fun convertSeconds(seconds: Int): String {
    val days = seconds / (24 * 3600)
    val remainingSecondsAfterDays = seconds % (24 * 3600)
    val hours = remainingSecondsAfterDays / 3600
    val remainingSecondsAfterHours = remainingSecondsAfterDays % 3600
    val minutes = remainingSecondsAfterHours / 60
    val sec = remainingSecondsAfterHours % 60
    return "$days days, $hours hours, $minutes minutes and $sec seconds"
}

// Function to increment date by one month
fun incrementDateByOneMonth(date: String): String {
    val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
    val parsedDate = dateFormat.parse(date)!!
    val calendar = Calendar.getInstance()
    calendar.time = parsedDate
    calendar.add(Calendar.MONTH, 1)
    return dateFormat.format(calendar.time)
}

// Main function to test the scripts
fun main() {
    println("1. Date Difference: " + calculateDateDifference("1981-11-04", "2013-09-04"))
    println("2. Date Format Conversion: " + convertDateFormat("2012-09-12"))
    println("3. Date to Timestamp: " + dateToTimestamp("12-05-2014"))
    println("4. Seconds Conversion: " + convertSeconds(200000))
    println("5. Increment Date by One Month: " + incrementDateByOneMonth("2012-12-21"))
}
